(load "package://umoru/urdf/umoru.l")
(ros::roseus-add-msgs "visualization_msgs")

;; initialize robot
(umoru)
(dolist (j (send *umoru* :joint-list))
  (send j :min-angle -135)
  (send j :max-angle 135))
(defun hug-pose()
  (dolist (j (send *umoru* :joint-list))
    (when (substringp "r_elbow" (send j :name))
      (send j :joint-angle -20))
    (when (substringp "l_elbow" (send j :name))
      (send j :joint-angle 20)))
)
(defun reset-pose()
  (dolist (j (send *umoru* :joint-list))
    (send j :joint-angle 0)))
(defun init-pose()
  (send *umoru* :r_shoulder_joint :joint-angle 90)
  (send *umoru* :l_shoulder_joint :joint-angle -90))

;; create markers
(setq *marker-list* nil)
(dolist (lk (send *umoru* :links))
  (when (and (substringp "r_elbow" (send lk :name)) (not (substringp "4" (send lk :name))))
    (setq coords (send lk :copy-worldcoords))
    (setq cyl (make-cylinder 40 5))
    (send cyl :newcoords coords)
    (send cyl :rotate (deg2rad -90) :x)
    (send cyl :translate (float-vector 40 35 0) :world)
    (send cyl :set-color :green)
    (send lk :assoc cyl)
    (setq *marker-list* (acons (send lk :name) cyl *marker-list*)))
  (when (and (substringp "l_elbow" (send lk :name)) (not (substringp "4" (send lk :name))))
    (setq coords (send lk :copy-worldcoords))
    (setq cyl (make-cylinder 40 5))
    (send cyl :newcoords coords)
    (send cyl :rotate (deg2rad 90) :x)
    (send cyl :translate (float-vector 40 -35 0) :world)
    (send cyl :set-color :green)
    (send lk :assoc cyl)
    (setq *marker-list* (acons (send lk :name) cyl *marker-list*)))
  )
(setq l (append (list *umoru*) (mapcar #'cdr *marker-list*)))

;; initialize viewer
(unless (boundp '*irtviewer*)
  (make-irtviewer))
(send *irtviewer* :viewer :viewing :look #f(2405.22 1816.02 5480.98) #f(-63.1908 151.055 896.113) #f(0.0 0.0 1.0))
(send *irtviewer* :objects l)
(send *irtviewer* :draw-objects)

;; ros function
(ros::roseus "visualize_marker")
(defun marker-cb (msg)
  (dolist (marker (send msg :markers))
    (let ((name (send marker :ns)) (rgba (send marker :color)))
      (setq target (cdr (assoc name *marker-list* :test #'string-equal)))
      (send target :set-color (float-vector (send rgba :r) (send rgba :g) (send rgba :b))
            (send rgba :a))
      ))
  (send *irtviewer* :draw-objects))
(ros::subscribe "marker" visualization_msgs::MarkerArray #'marker-cb)
(do-until-key
 (ros::spin-once)
 )
